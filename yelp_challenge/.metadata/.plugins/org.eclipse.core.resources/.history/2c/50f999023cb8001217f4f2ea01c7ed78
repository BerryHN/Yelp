import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class Recommender {

	HashMap<String, Integer> userMap;
	HashMap<String, Integer> businessMap;
	long [][] ratings; //user to item
	long[][] itemToItem;
	double density;
	double averageReviews;

	public static final int NB_USERS = 45981;
	public static final int NB_BUSINESS = 11537;


	public Recommender()
	{
		userMap = new HashMap<String,Integer>();
		businessMap = new HashMap<String,Integer>();
		ratings = new long [NB_USERS][NB_BUSINESS];
		itemToItem = new long[NB_BUSINESS][NB_BUSINESS];
		density = 0;
	}
	
	public void saveMatrice(String fileName, long[][] matrice) throws FileNotFoundException
	{
		PrintWriter out = new PrintWriter(fileName);
		for (int i = 0; i < matrice.length ; i++)
		{
			for (int j = 0; j < matrice[0].length; j++)
			{
				out.print(ratings[i][j]);
				out.print(";");
			}
			out.println();
		}
		out.close();
	}
	
	public void loadMatrice(String fileName, long[][] matrice) throws FileNotFoundException
	{
		Scanner in = new Scanner(new File(fileName));
		for (int  i = 0; i < matrice.length ; i++)
		{
			String line = in.nextLine();
			String[] rate = line.split(";");
			for (int j =0 ; j < matrice.length; j++)
			{
				matrice[i][j] = Long.parseLong(rate[j]);
			}
		}
	}
	
	public void buildRatingMatrice(String fileName)
	{
		int countUser = 0;
		int countBusiness = 0;

		try {
			JSONParser parser = new JSONParser();
			Scanner in = new Scanner(new File(fileName));
			while(in.hasNextLine())
			{
				String content = in.nextLine().replace("\\.", "");
				Object obj = parser.parse(content);
				JSONObject jsonObject = (JSONObject) obj;

				// read the json object
				String user_id = (String) jsonObject.get("user_id");
				String business_id = (String) jsonObject.get("business_id");
				Long stars = (Long)jsonObject.get("stars");

				// store the user
				if (!userMap.containsKey(user_id))
				{
					userMap.put(user_id, countUser);
					countUser++;
				}

				// store the businness
				if (!businessMap.containsKey(business_id))
				{
					businessMap.put(business_id, countBusiness);
					countBusiness++;
				}

				// store the rating
				//TODO : 3 as a threshold constant
				if (stars > 3)
					ratings[userMap.get(user_id)][businessMap.get(business_id)] = 1;
			}

			// density of the matrix and average Reviews
			int nbNonZero = 0;
			for (int i = 0 ; i < NB_USERS; i++)
				for (int j = 0; j < NB_BUSINESS ; j++)
					if (ratings[i][j] != 0)
						nbNonZero++;
			
			this.averageReviews = nbNonZero / NB_USERS;
			this.density = (double)nbNonZero / (NB_USERS * NB_BUSINESS);
		}
		catch (ParseException e) {
			e.printStackTrace();
		}
		
		catch (FileNotFoundException   e)
		{
			e.printStackTrace();
		}
	} 
	
	void buildItemtoItemMatrice()
	{
		for (int item1 = 0 ; item1 < NB_BUSINESS; item1++)
		{
			for (int item2 = item1+1 ; item2 < NB_BUSINESS; item2++)
			{
				long sim = getSimilarity(item1, item2);
				itemToItem[item1][item2] = sim;
				itemToItem[item2][item1] = sim;
			}
		}
	}
	
	// item 1 and 2 are the index of the item in the matrice
	private long getSimilarity(int item1 , int item2)
	{
		long sim = scalarProduct(item1, item2) / (scalarProduct(item1, item1) * scalarProduct(item2,item2));
		System.out.println(sim);
		return sim;		
	}
	
	private long scalarProduct(int item1, int item2)
	{
		long product = 0;
		for (int i = 0; i < ratings.length; i++)
		{
			product += ratings[i][item1] * ratings[i][item2];
		}
		return product;
	}
	

	public static void main(String[] argv) throws FileNotFoundException
	{
		System.out.println("hello");
		Recommender myParser = new Recommender();
		//myParser.buildRatingMatrice("/Users/sabrinerekik/Yelp/yelp_challenge/yelp_phoenix_academic_dataset/yelp_academic_dataset_review.json");
		System.out.println("Loading Ratings Matrice");
		myParser.loadMatrice("matrice.txt", myParser.ratings);
		System.out.println("creating Items to Items Matrice");
		myParser.saveMatrice("itemToItem.txt", myParser.itemToItem);
		System.out.println("end");
	}
}